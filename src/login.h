// DO NOT SUBMIT THIS FILE
//
// When submitting your project, this file will be overwritten
// by the automated build and test system.
//
// DO NOT EDIT THIS FILE
//
// Since any changes you make will be lost when you submit your project.

#ifndef LOGIN_H
#define LOGIN_H

#include "account.h"

#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <time.h>

#define SESSION_INVALID_ACCOUNT_ID (-1)

typedef struct {
  int account_id;         // ID of the authenticated account
  time_t session_start;   // login start time
  time_t expiration_time; // session expiry time
} login_session_data_t;

typedef enum {
  LOGIN_SUCCESS = 0,
  LOGIN_FAIL_USER_NOT_FOUND,
  LOGIN_FAIL_BAD_PASSWORD,
  LOGIN_FAIL_ACCOUNT_EXPIRED,
  LOGIN_FAIL_ACCOUNT_BANNED,
  LOGIN_FAIL_IP_BANNED,
  LOGIN_FAIL_INTERNAL_ERROR
} login_result_t;

/**
 * Attempt to log in a user.
 *
 * (See the project spec for additional details.)
 *
 * On success, fills out the session data and returns LOGIN_SUCCESS.
 * On failure, returns the appropriate LOGIN_FAIL_* value.
 *
 * Parameters:
 *
 * - userid            - the user ID to authenticate
 * - password          - the plaintext password to verify
 * - client_ip         - IPv4 address of the client
 * - login_time        - the timestamp of login attempt
 * - client_output_fd  - writable descriptor to send messages to the client
 * - log_fd            - writable descriptor to write server log messages
 * - session           - pointer to login_session_data_t to populate on success
 */
login_result_t handle_login(const char *userid, const char *password,
                            ip4_addr_t client_ip, time_t login_time,
                            int client_output_fd,
                            login_session_data_t *session);





#endif // LOGIN_H
